// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model user {
//   id Int @id @default(autoincrement()) 
//   firstName String @db.VarChar(50)
//   middleName String @db.VarChar(50)
//   lastName String @db.VarChar(30)
//   mobile String @db.VarChar(30)
//   email String @db.VarChar(30)
//   passwordHash String @db.VarChar(30)
//   createAt DateTime @default(now()) @db.Timestamp(0)
//   updateAt DateTime  @default(now()) @updatedAt @db.Timestamp(0)
//  post post []
// }

// model post{
//   id BigInt @id @default(autoincrement()) 
//   authorId BigInt @db.UnsignedBigInt()
//   parentId BigInt
//   title String @db.VarChar(50) 
//   metaTile String @db.VarChar(50)
//   slug String @db.VarChar(20)
//   summary String @db.VarChar(20)
//   // published Boolean @db.Boolean(20)
//   createAt DateTime @default(now()) @db.Timestamp(0)
//   updateAt DateTime  @default(now()) @updatedAt @db.Timestamp(0)
//   user user  @relation(fields: [authorId],references: [id],onDelete: Restrict,onUpdate: Cascade)
// }





model user {
  id Int @id @default(autoincrement())
  firstName String @db.VarChar(50)
  middleName String @db.VarChar(50)
  lastName String @db.VarChar(30)
  mobile String @db.VarChar(30)
  email String @db.VarChar(30)
  passwordHash String @db.VarChar(30)
  createAt DateTime @default(now()) @db.Timestamp(0)
  updateAt DateTime  @default(now()) @updatedAt @db.Timestamp(0)
  posts post []
}

model post{
  id BigInt @id @default(autoincrement())
  authorId Int 
  parentId BigInt @db.UnsignedBigInt()
  title String @db.VarChar(50)
  metaTile String @db.VarChar(50)
  slug String @db.VarChar(20)
  summary String @db.VarChar(20)
   
  createAt DateTime @default(now()) @db.Timestamp(0)
  updateAt DateTime  @default(now()) @updatedAt @db.Timestamp(0)
  user user @relation(fields: [authorId],references: [id],onDelete: Restrict,onUpdate:Cascade)
  post_comments post_comment[]
  post_tag post_tag []
  post_category post_category [] 
  post_meta post_meta []
}

model post_comment{
    id BigInt @id @default(autoincrement())
    postId BigInt
    post post @relation(fields: [postId],references: [id],onDelete: Restrict,onUpdate: Cascade)
    parentId BigInt
    title String @db.VarChar(20)
    published String @db.TinyText()
    context_text String @db.VarChar(20)
    createAt DateTime @default(now()) @db.Timestamp(0)
    updateAt DateTime  @default(now()) @updatedAt @db.Timestamp(0)
    
}

model tag{
  id BigInt @id @default(autoincrement())
  title String @db.VarChar(20)
  metaTitle String @db.VarChar(20)
  slug String @db.VarChar(20)
  content String @db.Text()
  post_tag post_tag []
}

model post_tag{
   postId BigInt
   post post @relation(fields: [postId],references: [id],onDelete: Restrict,onUpdate:Cascade)
   tagId BigInt
   tag tag @relation(fields: [tagId],references: [id],onDelete: Restrict,onUpdate:Cascade)

   @@id([postId,tagId])
}

model category{
  id BigInt @id @default(autoincrement())
  parentId BigInt
  title String @db.VarChar(20)
  metaTile String @db.VarChar(100)
  slug String @db.VarChar(100)
  content String @db.Text()
 post_category post_category []
}

model post_category {
  postId BigInt
  post post @relation(fields: [postId],references: [id],onDelete: Restrict,onUpdate:Cascade)
  categoryId BigInt
  category category @relation(fields: [categoryId],references: [id],onDelete: Restrict,onUpdate:Cascade)

  @@id([postId,categoryId])
}

model post_meta{
id BigInt @id @default(autoincrement())
postId BigInt
 post post @relation(fields: [postId],references: [id],onDelete: Restrict,onUpdate:Cascade)
key String @db.VarChar(30)
content_text String @db.VarChar(30)
}
